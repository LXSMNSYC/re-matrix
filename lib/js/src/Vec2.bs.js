// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Utils$ReMatrix = require("./Utils.bs.js");

function add(param, param$1) {
  return /* tuple */[
          param[0] + param$1[0],
          param[1] + param$1[1]
        ];
}

function sub(param, param$1) {
  return /* tuple */[
          param[0] - param$1[0],
          param[1] - param$1[1]
        ];
}

function mul(param, param$1) {
  return /* tuple */[
          param[0] * param$1[0],
          param[1] * param$1[1]
        ];
}

function div(param, param$1) {
  return /* tuple */[
          param[0] / param$1[0],
          param[1] / param$1[1]
        ];
}

function abs(param) {
  return /* tuple */[
          Math.abs(param[0]),
          Math.abs(param[1])
        ];
}

function acos(param) {
  return /* tuple */[
          Math.acos(param[0]),
          Math.acos(param[1])
        ];
}

function acosh(param) {
  return /* tuple */[
          Utils$ReMatrix.acosh(param[0]),
          Utils$ReMatrix.acosh(param[1])
        ];
}

function asin(param) {
  return /* tuple */[
          Math.asin(param[0]),
          Math.asin(param[1])
        ];
}

function asinh(param) {
  return /* tuple */[
          Utils$ReMatrix.asinh(param[0]),
          Utils$ReMatrix.asinh(param[1])
        ];
}

function atan(param) {
  return /* tuple */[
          Math.atan(param[0]),
          Math.atan(param[1])
        ];
}

function atanh(param) {
  return /* tuple */[
          Utils$ReMatrix.atanh(param[0]),
          Utils$ReMatrix.asinh(param[1])
        ];
}

function ceil(param) {
  return /* tuple */[
          Math.ceil(param[0]),
          Math.ceil(param[1])
        ];
}

function clamp(param, param$1, param$2) {
  return /* tuple */[
          Utils$ReMatrix.clamp(param[0], param$1[0], param$2[0]),
          Utils$ReMatrix.clamp(param[1], param$1[1], param$2[1])
        ];
}

function cos(param) {
  return /* tuple */[
          Math.cos(param[0]),
          Math.cos(param[1])
        ];
}

function cosh(param) {
  return /* tuple */[
          Math.cosh(param[0]),
          Math.cosh(param[1])
        ];
}

function degrees(param) {
  return /* tuple */[
          Utils$ReMatrix.rad2deg(param[0]),
          Utils$ReMatrix.rad2deg(param[1])
        ];
}

function distance(param, param$1) {
  var x = param[0] - param[1];
  var y = param$1[0] - param$1[1];
  return Math.sqrt(x * x + y * y);
}

function dot(param, param$1) {
  return param[0] * param[1] + param$1[0] * param$1[1];
}

function length2(param) {
  var y = param[1];
  var x = param[0];
  return x * x + y * y;
}

function length(v) {
  return Math.sqrt(length2(v));
}

var $plus = add;

var $neg = sub;

var $star = mul;

var $slash = div;

exports.add = add;
exports.$plus = $plus;
exports.sub = sub;
exports.$neg = $neg;
exports.mul = mul;
exports.$star = $star;
exports.div = div;
exports.$slash = $slash;
exports.abs = abs;
exports.acos = acos;
exports.acosh = acosh;
exports.asin = asin;
exports.asinh = asinh;
exports.atan = atan;
exports.atanh = atanh;
exports.ceil = ceil;
exports.clamp = clamp;
exports.cos = cos;
exports.cosh = cosh;
exports.degrees = degrees;
exports.distance = distance;
exports.dot = dot;
exports.length2 = length2;
exports.length = length;
/* No side effect */
